const ATOMIC_STDIN_FILLED = 0;
const ATOMIC_STDIN_CONSUMED = 1;
const ATOMIC_COUNT = 2;
const STDIN_BITS = 10;
const STDIN_COUNT = (1 << STDIN_BITS);
const STDIN_MASK = STDIN_COUNT - 1;
function exec_base64_wasm(data, wasm) {
    var memory;
    const { atomic_sab, stdin_sab } = data;
    const atomic = new Int32Array(atomic_sab);
    const stdin = new Uint8Array(stdin_sab);
    const ERRNO_SUCCESS = 0;
    const ERRNO_BADF = 8;
    const ERRNO_NOTCAPABLE = 76;
    function read_u8(ptr, offset) { return new DataView(memory.buffer).getUint8(ptr + offset); }
    function read_u16(ptr, offset) { return new DataView(memory.buffer).getUint16(ptr + offset, true); }
    function read_u32(ptr, offset) { return new DataView(memory.buffer).getUint32(ptr + offset, true); }
    function read_usize(ptr, offset) { return read_u32(ptr, offset); }
    function read_ptr(ptr, offset) { return read_usize(ptr, offset); }
    function write_u8(ptr, offset, value) { new DataView(memory.buffer).setUint8(ptr + offset, value); }
    function write_u16(ptr, offset, value) { new DataView(memory.buffer).setUint16(ptr + offset, value, true); }
    function write_u32(ptr, offset, value) { new DataView(memory.buffer).setUint32(ptr + offset, value, true); }
    function write_usize(ptr, offset, value) { write_u32(ptr, offset, value); }
    function write_ptr(ptr, offset, value) { write_usize(ptr, offset, value); }
    function slice(ptr, start, end) { return new DataView(memory.buffer, ptr + start, end - start); }
    function nyi() {
        return ERRNO_NOTCAPABLE;
    }
    function args_get() { return nyi(); }
    function args_sizes_get() { return nyi(); }
    function environ_get() { return nyi(); }
    function environ_sizes_get() { return nyi(); }
    function clock_res_get() { return nyi(); }
    function clock_time_get() { return nyi(); }
    function fd_advise() { return nyi(); }
    function fd_allocate() { return nyi(); }
    function fd_close() { return nyi(); }
    function fd_datasync() { return nyi(); }
    function fd_fdstat_get() { return nyi(); }
    function fd_fdstat_set_flags() { return nyi(); }
    function fd_fdstat_set_rights() { return nyi(); }
    function fd_filestat_get() { return nyi(); }
    function fd_filestat_set_size() { return nyi(); }
    function fd_filestat_set_times() { return nyi(); }
    function fd_pread() { return nyi(); }
    function fd_prestat_get() { return nyi(); }
    function fd_prestat_dir_name() { return nyi(); }
    function fd_pwrite() { return nyi(); }
    function fd_read(fd, iovec_array_ptr, iovec_array_len, nread_ptr) {
        var nread = 0;
        var errno = ERRNO_SUCCESS;
        for (var iovec_idx = 0; iovec_idx < iovec_array_len; ++iovec_idx) {
            var buf_ptr = read_ptr(iovec_array_ptr, 8 * iovec_idx + 0);
            var buf_len = read_usize(iovec_array_ptr, 8 * iovec_idx + 4);
            if (buf_len <= 0) {
                continue;
            }
            switch (fd) {
                case 0:
                    for (;;) {
                        var consumed = Atomics.load(atomic, ATOMIC_STDIN_CONSUMED);
                        while (Atomics.wait(atomic, ATOMIC_STDIN_FILLED, consumed) !== "ok") { }
                        var filled = Atomics.load(atomic, ATOMIC_STDIN_FILLED);
                        var available = (filled - consumed) | 0;
                        console.assert(available > 0);
                        var n = Math.min(available, buf_len);
                        for (var i = 0; i < n; ++i) {
                            var b = stdin[(i + consumed) & STDIN_MASK];
                            work2dom.post({ kind: "console", text: new TextDecoder().decode(new Uint8Array([b])) });
                            write_u8(buf_ptr, i, b);
                        }
                        Atomics.store(atomic, ATOMIC_STDIN_CONSUMED, (consumed + n) | 0);
                        nread += n;
                        break;
                    }
                    break;
                default:
                    errno = ERRNO_BADF;
                    break;
            }
        }
        write_usize(nread_ptr, 0, nread);
        return errno;
    }
    function fd_readdir() { return nyi(); }
    function fd_renumber() { return nyi(); }
    function fd_seek() { return nyi(); }
    function fd_sync() { return nyi(); }
    function fd_tell() { return nyi(); }
    function fd_write(fd, ciovec_array_ptr, ciovec_array_len, nwritten_ptr) {
        var nwritten = 0;
        var errno = ERRNO_SUCCESS;
        var text = "";
        for (var ciovec_idx = 0; ciovec_idx < ciovec_array_len; ++ciovec_idx) {
            var buf_ptr = read_ptr(ciovec_array_ptr, 8 * ciovec_idx + 0);
            var buf_len = read_usize(ciovec_array_ptr, 8 * ciovec_idx + 4);
            switch (fd) {
                case 1:
                case 2:
                    text += new TextDecoder().decode(slice(buf_ptr, 0, buf_len));
                    nwritten += buf_len;
                    break;
                default:
                    errno = ERRNO_BADF;
                    break;
            }
        }
        if (text !== "") {
            work2dom.post({ kind: "console", text });
        }
        write_usize(nwritten_ptr, 0, nwritten);
        return errno;
    }
    function path_create_directory() { return nyi(); }
    function path_filestats_get() { return nyi(); }
    function path_filestat_set_times() { return nyi(); }
    function path_link() { return nyi(); }
    function path_open() { return nyi(); }
    function path_readlink() { return nyi(); }
    function path_remove_directory() { return nyi(); }
    function path_rename() { return nyi(); }
    function path_symlink() { return nyi(); }
    function path_unlink_file() { return nyi(); }
    function poll_oneoff() { return nyi(); }
    function proc_exit(code) {
        work2dom.post({ kind: "proc_exit", code });
        throw "exit";
    }
    function proc_raise() { return nyi(); }
    function sched_yield() { return nyi(); }
    function random_get() { return nyi(); }
    function sock_recv() { return nyi(); }
    function sock_send() { return nyi(); }
    function sock_shutdown() { return nyi(); }
    const imports = {
        wasi_snapshot_preview1: {
            args_get,
            args_sizes_get,
            environ_get,
            environ_sizes_get,
            clock_res_get,
            clock_time_get,
            fd_advise,
            fd_allocate,
            fd_close,
            fd_datasync,
            fd_fdstat_get,
            fd_fdstat_set_flags,
            fd_fdstat_set_rights,
            fd_filestat_get,
            fd_filestat_set_size,
            fd_filestat_set_times,
            fd_pread,
            fd_prestat_get,
            fd_prestat_dir_name,
            fd_pwrite,
            fd_read,
            fd_readdir,
            fd_renumber,
            fd_seek,
            fd_sync,
            fd_tell,
            fd_write,
            path_create_directory,
            path_filestats_get,
            path_filestat_set_times,
            path_link,
            path_open,
            path_readlink,
            path_remove_directory,
            path_rename,
            path_symlink,
            path_unlink_file,
            poll_oneoff,
            proc_exit,
            proc_raise,
            sched_yield,
            random_get,
            sock_recv,
            sock_send,
            sock_shutdown,
        },
    };
    const binary = atob(wasm);
    const typedarray = new Uint8Array(binary.length);
    for (var i = 0; i < binary.length; ++i) {
        typedarray[i] = binary.charCodeAt(i);
    }
    WebAssembly.compile(typedarray).then(function (m) {
        if (false) {
            WebAssembly.Module.imports(m).forEach(function (imp) {
                console.log("import", imp);
            });
            WebAssembly.Module.exports(m).forEach(function (exp) {
                console.log("export", exp);
            });
        }
        return WebAssembly.instantiate(m, imports);
    }).then(function (m) {
        memory = m.exports.memory;
        try {
            m.exports.main();
            proc_exit(0);
        }
        catch (e) {
            if (e !== "exit") {
                console.error(e);
                debugger;
                throw e;
            }
        }
        finally {
            self.close();
        }
    });
}
var main_dom_worker;
function main_dom() {
    const con = requireElementById("console");
    const cursor = requireElementById("cursor");
    const atomic_sab = new SharedArrayBuffer(4 * ATOMIC_COUNT);
    const atomic = new Int32Array(atomic_sab);
    const stdin_sab = new SharedArrayBuffer(STDIN_COUNT);
    const stdin = new Uint8Array(stdin_sab);
    const blob = new Blob(Array.prototype.map.call(document.querySelectorAll('script:not([data-js-worker=\'false\'])'), function (oScript) { return oScript.textContent; }), { type: 'text/javascript' });
    main_dom_worker = new Worker(window.URL.createObjectURL(blob));
    main_dom_worker.onmessage = function (e) {
        switch (e.data.kind) {
            case "console":
                con.insertBefore(document.createTextNode(e.data.text), cursor);
                break;
            case "proc_exit":
                var exit = document.createElement("span");
                exit.textContent = `\nprocess exited with code ${e.data.code}`;
                exit.style.color = "#888";
                con.insertBefore(exit, cursor);
                con.removeChild(cursor);
                break;
            default:
                console.error("unexpected event kind", e.data.kind);
                debugger;
                break;
        }
    };
    dom2work.post({
        kind: "init",
        atomic_sab,
        stdin_sab,
    });
    var stdin_buffer = [];
    document.addEventListener("keypress", function (e) {
        var text = e.char || String.fromCharCode(e.charCode);
        if (text === "\r") {
            text = "\n";
        }
        var chars = new TextEncoder().encode(text);
        for (var i = 0; i < chars.length; ++i) {
            stdin_buffer.push(chars[i]);
        }
    });
    setInterval(function () {
        if (stdin_buffer.length === 0)
            return;
        var filled = Atomics.load(atomic, ATOMIC_STDIN_FILLED);
        var consumed = Atomics.load(atomic, ATOMIC_STDIN_CONSUMED);
        var available = STDIN_COUNT - ((filled - consumed) | 0);
        var n = Math.min(available, stdin_buffer.length);
        for (var i = 0; i < n; ++i) {
            stdin[(i + filled) & STDIN_MASK] = stdin_buffer[i];
        }
        stdin_buffer.splice(0, n);
        filled = (filled + n) | 0;
        Atomics.store(atomic, ATOMIC_STDIN_FILLED, filled);
        Atomics.notify(atomic, ATOMIC_STDIN_FILLED, +Infinity);
    }, 0);
}
function requireElementById(id) {
    let el = document.getElementById(id);
    if (!el) {
        throw `no such element in document: #${id}`;
    }
    return el;
}
function main_worker() {
    self.onmessage = function (e) {
        switch (e.data.kind) {
            case "init":
                exec_base64_wasm(e.data, "{BASE64_WASM32}");
                break;
            default:
                console.error("unexpected event kind", e.data.kind);
                debugger;
                break;
        }
    };
}
var dom2work;
(function (dom2work) {
    function post(data) {
        main_dom_worker.postMessage(data);
    }
    dom2work.post = post;
})(dom2work || (dom2work = {}));
var work2dom;
(function (work2dom) {
    function post(message) {
        self.postMessage(message);
    }
    work2dom.post = post;
})(work2dom || (work2dom = {}));
//# sourceMappingURL=data:application/json;base64,